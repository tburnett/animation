"""
Copy this since latest show not on older PyPI wtlike
"""

from utilities.ipynb_docgen import (doc_formatter, FigureWrapper, SeriesWrapper, 
                                    DataFrameWrapper, image, capture, PPWrapper)
import matplotlib.pyplot as plt
import pandas as pd



def show(obj, vars={}, **kwargs):
    """Add the representation of an object to the Jupyter notebook display,
        which is created when the cell is executed.

    * obj -- one of the following:
      * text, assumed to be markdown, unless it is file name of an image; in this
          case, the image will be displayed
      * an instance of `plt.Figure`, `pd.DataFrame` or `pd.Series`
      * an object with a `_repr_html_` method.
      * any standard python object (dict, list, ...)
      * a callable function that generates printout, which will be captured and displayed.

    * vars -- optional dictionary of f-string replacement values, if text
    * kwargs -- key words for the `Wrapper` class, especially "summary".
                if set to a text string, that will hide the representation
                under a clickable summary line, a "disclosure" widget.`
                For figures, an option "caption" allows text for a caption.

    """
    import inspect
    import IPython.display as display
    mime_type = 'text/markdown'

    # Generate a doc to be passed to the display buffer, markdown or html
    if type(obj) == str:
        if obj.endswith( ('.png', '.jpg','.gif','.jpeg')):
            # the string may be the filename of an image
            doc = FigureWrapper(image(obj), **kwargs)._repr_html_()
            mime_type = 'text/html'
            # display.display(doc_formatter(doc, mimetype='text/html'))
        else:
            # a string is markdown. 
            # cleandoc aligns text, useful for markdown to recognize its features
            doc = inspect.cleandoc(obj)
            # display.display( doc_formatter(inspect.cleandoc(obj),  vars,))

    elif callable(obj):
        # call the callable, capturing its output to sys.stdout, and converting to markdown
        with capture(**kwargs) as out:
            obj()
        doc= out
        display.display(out)
        return # special case that doc_formatter fails on
    else:
        # everything else is html generated by the object or a Wrapper subclass

        mime_type = 'text/html'
        wrappers= {
            plt.Figure:   FigureWrapper,
            pd.Series:    SeriesWrapper,
            pd.DataFrame: DataFrameWrapper, 
        }
        wrapper = wrappers.get(obj.__class__, None)
        if wrapper is not None:
            # recognized
            doc = wrapper(obj, vars, **kwargs)._repr_html_()
        elif hasattr(obj, '_repr_html_'):
            doc = obj._repr_html_()
        else:
            # finally assume this is a standard python object - will try to pretty-print
            doc = str(PPWrapper(obj, **kwargs))

        # display.display(doc_formatter(doc, vars, mimetype='text/html'))
    # pass the doc, a callable or a text string to the formatter
    display.display(doc_formatter(doc, vars, mimetype=mime_type))
